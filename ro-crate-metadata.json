{
    "@context": [
        "https://w3id.org/ro/crate/1.1/context",
        {
            "GithubService": "https://w3id.org/ro/terms/test#GithubService",
            "JenkinsService": "https://w3id.org/ro/terms/test#JenkinsService",
            "PlanemoEngine": "https://w3id.org/ro/terms/test#PlanemoEngine",
            "TestDefinition": "https://w3id.org/ro/terms/test#TestDefinition",
            "TestInstance": "https://w3id.org/ro/terms/test#TestInstance",
            "TestService": "https://w3id.org/ro/terms/test#TestService",
            "TestSuite": "https://w3id.org/ro/terms/test#TestSuite",
            "TravisService": "https://w3id.org/ro/terms/test#TravisService",
            "definition": "https://w3id.org/ro/terms/test#definition",
            "engineVersion": "https://w3id.org/ro/terms/test#engineVersion",
            "instance": "https://w3id.org/ro/terms/test#instance",
            "resource": "https://w3id.org/ro/terms/test#resource",
            "runsOn": "https://w3id.org/ro/terms/test#runsOn"
        }
    ],
    "@graph": [
        {
            "@id": "./",
            "@type": "Dataset",
            "creativeWorkStatus": "InProgress",
            "datePublished": "2025-07-08T11:39:36+00:00",
            "description": "<h1>\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"docs/images/nf-core-proteinfold_logo_dark.png\">\n    <img alt=\"nf-core/proteinfold\" src=\"docs/images/nf-core-proteinfold_logo_light.png\">\n  </picture>\n</h1>\n\n[![GitHub Actions CI Status](https://github.com/nf-core/proteinfold/actions/workflows/nf-test.yml/badge.svg)](https://github.com/nf-core/proteinfold/actions/workflows/nf-test.yml)\n[![GitHub Actions Linting Status](https://github.com/nf-core/proteinfold/actions/workflows/linting.yml/badge.svg)](https://github.com/nf-core/proteinfold/actions/workflows/linting.yml)[![AWS CI](https://img.shields.io/badge/CI%20tests-full%20size-FF9900?labelColor=000000&logo=Amazon%20AWS)](https://nf-co.re/proteinfold/results)[![Cite with Zenodo](http://img.shields.io/badge/DOI-10.5281/zenodo.13135393-1073c8?labelColor=000000)](https://doi.org/10.5281/zenodo.13135393)\n\n[![Nextflow](https://img.shields.io/badge/version-%E2%89%A524.10.5-green?style=flat&logo=nextflow&logoColor=white&color=%230DC09D&link=https%3A%2F%2Fnextflow.io)](https://www.nextflow.io/)\n[![nf-core template version](https://img.shields.io/badge/nf--core_template-3.3.2-green?style=flat&logo=nfcore&logoColor=white&color=%2324B064&link=https%3A%2F%2Fnf-co.re)](https://github.com/nf-core/tools/releases/tag/3.3.2)\n[![run with conda](http://img.shields.io/badge/run%20with-conda-3EB049?labelColor=000000&logo=anaconda)](https://docs.conda.io/en/latest/)\n[![run with docker](https://img.shields.io/badge/run%20with-docker-0db7ed?labelColor=000000&logo=docker)](https://www.docker.com/)\n[![run with singularity](https://img.shields.io/badge/run%20with-singularity-1d355c.svg?labelColor=000000)](https://sylabs.io/docs/)\n[![Launch on Seqera Platform](https://img.shields.io/badge/Launch%20%F0%9F%9A%80-Seqera%20Platform-%234256e7)](https://cloud.seqera.io/launch?pipeline=https://github.com/nf-core/proteinfold)\n\n[![Get help on Slack](http://img.shields.io/badge/slack-nf--core%20%23proteinfold-4A154B?labelColor=000000&logo=slack)](https://nfcore.slack.com/channels/proteinfold)[![Follow on Bluesky](https://img.shields.io/badge/bluesky-%40nf__core-1185fe?labelColor=000000&logo=bluesky)](https://bsky.app/profile/nf-co.re)[![Follow on Mastodon](https://img.shields.io/badge/mastodon-nf__core-6364ff?labelColor=FFFFFF&logo=mastodon)](https://mstdn.science/@nf_core)[![Watch on YouTube](http://img.shields.io/badge/youtube-nf--core-FF0000?labelColor=000000&logo=youtube)](https://www.youtube.com/c/nf-core)\n\n## Introduction\n\n**nf-core/proteinfold** is a bioinformatics best-practice analysis pipeline for Protein 3D structure prediction.\n\nThe pipeline is built using [Nextflow](https://www.nextflow.io), a workflow tool to run tasks across multiple compute infrastructures in a very portable manner. It uses Docker/Singularity containers making installation trivial and results highly reproducible. The [Nextflow DSL2](https://www.nextflow.io/docs/latest/dsl2.html) implementation of this pipeline uses one container per process which makes it much easier to maintain and update software dependencies. Where possible, these processes have been submitted to and installed from [nf-core/modules](https://github.com/nf-core/modules) in order to make them available to all nf-core pipelines, and to everyone within the Nextflow community!\n\nOn release, automated continuous integration tests run the pipeline on a full-sized dataset on the AWS cloud infrastructure. This ensures that the pipeline runs on AWS, has sensible resource allocation defaults set to run on real-world datasets, and permits the persistent storage of results to benchmark between pipeline releases and other analysis sources. The results obtained from the full-sized test can be viewed on the [nf-core website](https://nf-co.re/proteinfold/results).\n\n## Pipeline summary\n\n![Alt text](docs/images/nf-core-proteinfold_metro_map_1.1.0.png?raw=true \"nf-core-proteinfold 1.1.0 metro map\")\n\n1. Choice of protein structure prediction method:\n\n   i. [AlphaFold2](https://github.com/deepmind/alphafold) - Regular AlphaFold2 (MSA computation and model inference in the same process)\n\n   ii. [AlphaFold2 split](https://github.com/luisas/alphafold_split) - AlphaFold2 MSA computation and model inference in separate processes\n\n   iii. [AlphaFold3](https://github.com/deepmind/alphafold) - Regular AlphaFold3 (MSA computation and model inference in the same process)\n\n   iv. [ColabFold](https://github.com/sokrypton/ColabFold) - MMseqs2 API server followed by ColabFold\n\n   v. [ColabFold](https://github.com/sokrypton/ColabFold) - MMseqs2 local search followed by ColabFold\n\n   vi. [ESMFold](https://github.com/facebookresearch/esm) - Regular ESM\n\n   vii. [RoseTTAFold-All-Atom](https://github.com/baker-laboratory/RoseTTAFold-All-Atom/) - Regular RFAA\n\n   viii. [HelixFold3](https://github.com/PaddlePaddle/PaddleHelix/tree/dev/apps/protein_folding/helixfold3) - Regular HF3\n\n   ix. [Boltz](https://github.com/jwohlwend/boltz/) - Regular Boltz-1\n\n## Usage\n\n> [!NOTE]\n> If you are new to Nextflow and nf-core, please refer to [this page](https://nf-co.re/docs/usage/installation) on how to set-up Nextflow. Make sure to [test your setup](https://nf-co.re/docs/usage/introduction#how-to-run-a-pipeline) with `-profile test` before running the workflow on actual data.\n\nNow, you can run the pipeline using:\n\n```bash\nnextflow run nf-core/proteinfold \\\n   -profile <docker/singularity/.../institute> \\\n   --input samplesheet.csv \\\n   --outdir <OUTDIR>\n```\n\nThe pipeline takes care of downloading the databases and parameters required by AlphaFold2, Colabfold, ESMFold or RoseTTAFold-All-Atom. In case you have already downloaded the required files, you can skip this step by providing the path to the databases using the corresponding parameter [`--alphafold2_db`], [`--colabfold_db`], [`--esmfold_db`] or ['--rosettafold_all_atom_db']. Please refer to the [usage documentation](https://nf-co.re/proteinfold/usage) to check the directory structure you must provide for each database.\n\n- The typical command to run AlphaFold2 mode is shown below:\n\n  ```console\n  nextflow run nf-core/proteinfold \\\n      --input samplesheet.csv \\\n      --outdir <OUTDIR> \\\n      --mode alphafold2 \\\n      --alphafold2_db <null (default) | DB_PATH> \\\n      --full_dbs <true/false> \\\n      --alphafold2_model_preset monomer \\\n      --use_gpu <true/false> \\\n      -profile <docker/singularity/podman/shifter/charliecloud/conda/institute>\n  ```\n\n- Here is the command to run AlphaFold2 splitting the MSA from the prediction execution:\n\n  ```console\n  nextflow run nf-core/proteinfold \\\n      --input samplesheet.csv \\\n      --outdir <OUTDIR> \\\n      --mode alphafold2 \\\n      --alphafold2_mode split_msa_prediction \\\n      --alphafold2_db <null (default) | DB_PATH> \\\n      --full_dbs <true/false> \\\n      --alphafold2_model_preset monomer \\\n      --use_gpu <true/false> \\\n      -profile <docker/singularity/podman/shifter/charliecloud/conda/institute>\n  ```\n\n- The AlphaFold3 mode can be run using the command below:\n\n  ```console\n  nextflow run nf-core/proteinfold \\\n      --input samplesheet.csv \\\n      --outdir <OUTDIR> \\\n      --mode alphafold3 \\\n      --alphafold3_db <null (default) | DB_PATH> \\\n      --use_gpu <true/false> \\\n      -profile <docker/singularity/podman/shifter/charliecloud/conda/institute>\n  ```\n\n  > [!WARNING]\n  > The AlphaFold3 weights are not provided by this pipeline. Users must obtain the weights directly from DeepMind according to their [terms of use](https://github.com/deepmind/alphafold/blob/main/WEIGHTS_TERMS_OF_USE.md) and [prohibited use policy](https://github.com/deepmind/alphafold/blob/main/WEIGHTS_PROHIBITED_USE_POLICY.md). Please ensure you comply with all terms and conditions before using AlphaFold3. For more information about AlphaFold3 usage and requirements, please refer to the [official AlphaFold3 repository](https://github.com/deepmind/alphafold).\n\n- Below, the command to run colabfold_local mode:\n\n  ```console\n  nextflow run nf-core/proteinfold \\\n      --input samplesheet.csv \\\n      --outdir <OUTDIR> \\\n      --mode colabfold \\\n      --colabfold_db <null (default) | PATH> \\\n      --num_recycles_colabfold 3 \\\n      --use_amber <true/false> \\\n      --colabfold_model_preset \"alphafold2_ptm\" \\\n      --use_gpu <true/false> \\\n      --db_load_mode 0\n      -profile <docker/singularity/podman/shifter/charliecloud/conda/institute>\n  ```\n\n- The typical command to run colabfold_webserver mode would be:\n\n  ```console\n  nextflow run nf-core/proteinfold \\\n      --input samplesheet.csv \\\n      --outdir <OUTDIR> \\\n      --mode colabfold \\\n      --use_msa_server \\\n      --msa_server_url <custom MMSeqs2 API Server URL> \\\n      --colabfold_db <null (default) | PATH> \\\n      --num_recycles_colabfold 3 \\\n      --use_amber <true/false> \\\n      --colabfold_model_preset \"alphafold2_ptm\" \\\n      --use_gpu <true/false> \\\n      -profile <docker/singularity/podman/shifter/charliecloud/conda/institute>\n  ```\n\n  [!WARNING]\n\n  > If you aim to carry out a large amount of predictions using the colabfold_webserver mode, please setup and use your own custom MMSeqs2 API Server. You can find instructions [here](https://github.com/sokrypton/ColabFold/tree/main/MsaServer).\n\n- The esmfold mode can be run using the command below:\n\n  ```console\n  nextflow run nf-core/proteinfold \\\n      --input samplesheet.csv \\\n      --outdir <OUTDIR> \\\n      --mode esmfold \\\n      --esmfold_model_preset <monomer/multimer> \\\n      --esmfold_db <null (default) | PATH> \\\n      --num_recycles_esmfold 4 \\\n      --use_gpu <true/false> \\\n      -profile <docker/singularity/podman/shifter/charliecloud/conda/institute>\n  ```\n\n- The rosettafold_all_atom mode can be run using the command below:\n\n  ```console\n  nextflow run nf-core/proteinfold \\\n      --input samplesheet.csv \\\n      --outdir <OUTDIR> \\\n      --mode rosettafold_all_atom \\\n      --rosettafold_all_atom_db <null (default) | PATH> \\\n      --use_gpu <true/false> \\\n      -profile <docker/singularity/podman/shifter/charliecloud/conda/institute>\n  ```\n\n- The helixfold3 mode can be run using the command below:\n\n  ```console\n  nextflow run nf-core/proteinfold \\\n      --input samplesheet.csv \\\n      --outdir <OUTDIR> \\\n      --mode helixfold3 \\\n      --helixfold3_db <null (default) | PATH> \\\n      --use_gpu <true/false> \\\n      -profile <docker/singularity/podman/shifter/charliecloud/conda/institute>\n  ```\n\n- The boltz mode can be run using the command below:\n\n  ```console\n  nextflow run nf-core/proteinfold \\\n      --input samplesheet.csv \\\n      --outdir <OUTDIR> \\\n      --mode boltz \\\n      --boltz_ccd_path <null (default) | PATH> \\\n      --boltz_model_path <null (default) | PATH> \\\n      --use_gpu <true/false> \\\n      -profile <docker/singularity/podman/shifter/charliecloud/conda/institute>\n  ```\n\n> [!WARNING]\n> Please provide pipeline parameters via the CLI or Nextflow `-params-file` option. Custom config files including those provided by the `-c` Nextflow option can be used to provide any configuration _**except for parameters**_; see [docs](https://nf-co.re/docs/usage/getting_started/configuration#custom-configuration-files).\n\nFor more details and further functionality, please refer to the [usage documentation](https://nf-co.re/proteinfold/usage) and the [parameter documentation](https://nf-co.re/proteinfold/parameters).\n\n## Pipeline output\n\nTo see the results of an example test run with a full size dataset refer to the [results](https://nf-co.re/proteinfold/results) tab on the nf-core website pipeline page.\nFor more details about the output files and reports, please refer to the\n[output documentation](https://nf-co.re/proteinfold/output).\n\n## Credits\n\nnf-core/proteinfold was originally written by Athanasios Baltzis ([@athbaltzis](https://github.com/athbaltzis)), Jose Espinosa-Carrasco ([@JoseEspinosa](https://github.com/JoseEspinosa)), Luisa Santus ([@luisas](https://github.com/luisas)) and Leila Mansouri ([@l-mansouri](https://github.com/l-mansouri)) from [The Comparative Bioinformatics Group](https://www.crg.eu/en/cedric_notredame) at [The Centre for Genomic Regulation, Spain](https://www.crg.eu/) under the umbrella of the [BovReg project](https://www.bovreg.eu/) and Harshil Patel ([@drpatelh](https://github.com/drpatelh)) from [Seqera Labs, Spain](https://seqera.io/).\n\nMany thanks to others who have helped out and contributed along the way too, including (but not limited to): Norman Goodacre and Waleed Osman from Interline Therapeutics ([@interlinetx](https://github.com/interlinetx)), Martin Steinegger ([@martin-steinegger](https://github.com/martin-steinegger)) and Raoul J.P. Bonnal ([@rjpbonnal](https://github.com/rjpbonnal))\n\nWe would also like to thanks to the AWS Open Data Sponsorship Program for generously providing the resources necessary to host the data utilized in the testing, development, and deployment of nf-core proteinfold.\n\n## Contributions and Support\n\nIf you would like to contribute to this pipeline, please see the [contributing guidelines](.github/CONTRIBUTING.md).\n\nFor further information or help, don't hesitate to get in touch on the [Slack `#proteinfold` channel](https://nfcore.slack.com/channels/proteinfold) (you can join with [this invite](https://nf-co.re/join/slack)).\n\n## Citations\n\nIf you use nf-core/proteinfold for your analysis, please cite it using the following doi: [10.5281/zenodo.7437038](https://doi.org/10.5281/zenodo.7437038)\n\nAn extensive list of references for the tools used by the pipeline can be found in the [`CITATIONS.md`](CITATIONS.md) file.\n\nYou can cite the `nf-core` publication as follows:\n\n> **The nf-core framework for community-curated bioinformatics pipelines.**\n>\n> Philip Ewels, Alexander Peltzer, Sven Fillinger, Harshil Patel, Johannes Alneberg, Andreas Wilm, Maxime Ulysse Garcia, Paolo Di Tommaso & Sven Nahnsen.\n>\n> _Nat Biotechnol._ 2020 Feb 13. doi: [10.1038/s41587-020-0439-x](https://dx.doi.org/10.1038/s41587-020-0439-x).\n",
            "hasPart": [
                {
                    "@id": "main.nf"
                },
                {
                    "@id": "assets/"
                },
                {
                    "@id": "conf/"
                },
                {
                    "@id": "docs/"
                },
                {
                    "@id": "docs/images/"
                },
                {
                    "@id": "modules/"
                },
                {
                    "@id": "modules/nf-core/"
                },
                {
                    "@id": "workflows/"
                },
                {
                    "@id": "subworkflows/"
                },
                {
                    "@id": "nextflow.config"
                },
                {
                    "@id": "README.md"
                },
                {
                    "@id": "nextflow_schema.json"
                },
                {
                    "@id": "CHANGELOG.md"
                },
                {
                    "@id": "LICENSE"
                },
                {
                    "@id": "CODE_OF_CONDUCT.md"
                },
                {
                    "@id": "CITATIONS.md"
                },
                {
                    "@id": "modules.json"
                },
                {
                    "@id": "docs/usage.md"
                },
                {
                    "@id": "docs/output.md"
                },
                {
                    "@id": ".nf-core.yml"
                },
                {
                    "@id": ".pre-commit-config.yaml"
                },
                {
                    "@id": ".prettierignore"
                }
            ],
            "isBasedOn": "https://github.com/nf-core/proteinfold",
            "license": "MIT",
            "mainEntity": {
                "@id": "main.nf"
            },
            "mentions": [
                {
                    "@id": "#3e40ea74-c4ab-45b1-beb5-accf31043a86"
                }
            ],
            "name": "nf-core/proteinfold"
        },
        {
            "@id": "ro-crate-metadata.json",
            "@type": "CreativeWork",
            "about": {
                "@id": "./"
            },
            "conformsTo": [
                {
                    "@id": "https://w3id.org/ro/crate/1.1"
                },
                {
                    "@id": "https://w3id.org/workflowhub/workflow-ro-crate/1.0"
                }
            ]
        },
        {
            "@id": "main.nf",
            "@type": [
                "File",
                "SoftwareSourceCode",
                "ComputationalWorkflow"
            ],
            "creator": [
                {
                    "@id": "#drpatelhh@gmail.com"
                }
            ],
            "dateCreated": "",
            "dateModified": "2025-07-08T11:39:36Z",
            "dct:conformsTo": "https://bioschemas.org/profiles/ComputationalWorkflow/1.0-RELEASE/",
            "keywords": [
                "nf-core",
                "nextflow",
                "alphafold2",
                "colabfold",
                "esmfold",
                "protein-fold-prediction",
                "protein-folding",
                "protein-sequences",
                "protein-structure"
            ],
            "license": [
                "MIT"
            ],
            "name": [
                "nf-core/proteinfold"
            ],
            "programmingLanguage": {
                "@id": "https://w3id.org/workflowhub/workflow-ro-crate#nextflow"
            },
            "sdPublisher": {
                "@id": "https://nf-co.re/"
            },
            "url": [
                "https://github.com/nf-core/proteinfold",
                "https://nf-co.re/proteinfold/dev/"
            ],
            "version": [
                "1.2.0dev"
            ]
        },
        {
            "@id": "https://w3id.org/workflowhub/workflow-ro-crate#nextflow",
            "@type": "ComputerLanguage",
            "identifier": {
                "@id": "https://www.nextflow.io/"
            },
            "name": "Nextflow",
            "url": {
                "@id": "https://www.nextflow.io/"
            },
            "version": "!>=24.10.5"
        },
        {
            "@id": "#3e40ea74-c4ab-45b1-beb5-accf31043a86",
            "@type": "TestSuite",
            "instance": [
                {
                    "@id": "#401a0219-0d1e-4d19-a6af-901d59fc4e4c"
                }
            ],
            "mainEntity": {
                "@id": "main.nf"
            },
            "name": "Test suite for nf-core/proteinfold"
        },
        {
            "@id": "#401a0219-0d1e-4d19-a6af-901d59fc4e4c",
            "@type": "TestInstance",
            "name": "GitHub Actions workflow for testing nf-core/proteinfold",
            "resource": "repos/nf-core/proteinfold/actions/workflows/nf-test.yml",
            "runsOn": {
                "@id": "https://w3id.org/ro/terms/test#GithubService"
            },
            "url": "https://api.github.com"
        },
        {
            "@id": "https://w3id.org/ro/terms/test#GithubService",
            "@type": "TestService",
            "name": "Github Actions",
            "url": {
                "@id": "https://github.com"
            }
        },
        {
            "@id": "assets/",
            "@type": "Dataset",
            "description": "Additional files"
        },
        {
            "@id": "conf/",
            "@type": "Dataset",
            "description": "Configuration files"
        },
        {
            "@id": "docs/",
            "@type": "Dataset",
            "description": "Markdown files for documenting the pipeline"
        },
        {
            "@id": "docs/images/",
            "@type": "Dataset",
            "description": "Images for the documentation files"
        },
        {
            "@id": "modules/",
            "@type": "Dataset",
            "description": "Modules used by the pipeline"
        },
        {
            "@id": "modules/nf-core/",
            "@type": "Dataset",
            "description": "nf-core modules"
        },
        {
            "@id": "workflows/",
            "@type": "Dataset",
            "description": "Main pipeline workflows to be executed in main.nf"
        },
        {
            "@id": "subworkflows/",
            "@type": "Dataset",
            "description": "Smaller subworkflows"
        },
        {
            "@id": "nextflow.config",
            "@type": "File",
            "description": "Main Nextflow configuration file"
        },
        {
            "@id": "README.md",
            "@type": "File",
            "description": "Basic pipeline usage information"
        },
        {
            "@id": "nextflow_schema.json",
            "@type": "File",
            "description": "JSON schema for pipeline parameter specification"
        },
        {
            "@id": "CHANGELOG.md",
            "@type": "File",
            "description": "Information on changes made to the pipeline"
        },
        {
            "@id": "LICENSE",
            "@type": "File",
            "description": "The license - should be MIT"
        },
        {
            "@id": "CODE_OF_CONDUCT.md",
            "@type": "File",
            "description": "The nf-core code of conduct"
        },
        {
            "@id": "CITATIONS.md",
            "@type": "File",
            "description": "Citations needed when using the pipeline"
        },
        {
            "@id": "modules.json",
            "@type": "File",
            "description": "Version information for modules from nf-core/modules"
        },
        {
            "@id": "docs/usage.md",
            "@type": "File",
            "description": "Usage documentation"
        },
        {
            "@id": "docs/output.md",
            "@type": "File",
            "description": "Output documentation"
        },
        {
            "@id": ".nf-core.yml",
            "@type": "File",
            "description": "nf-core configuration file, configuring template features and linting rules"
        },
        {
            "@id": ".pre-commit-config.yaml",
            "@type": "File",
            "description": "Configuration file for pre-commit hooks"
        },
        {
            "@id": ".prettierignore",
            "@type": "File",
            "description": "Ignore file for prettier"
        },
        {
            "@id": "https://nf-co.re/",
            "@type": "Organization",
            "name": "nf-core",
            "url": "https://nf-co.re/"
        },
        {
            "@id": "#drpatelhh@gmail.com",
            "@type": "Person",
            "email": "drpatelhh@gmail.com",
            "name": "Harshil Patel"
        }
    ]
}
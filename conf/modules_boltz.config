/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    withName: 'RUN_BOLTZ' {
        ext.args = [
            params.boltz_out_dir                    ? "--out_dir ${params.boltz_out_dir}"                                       : "",
            params.boltz_cache                      ? "--cache ${params.boltz_cache}"                                           : "",
            params.boltz_checkpoint                 ? "--checkpoint ${params.boltz_checkpoint}"                                 : "",
            params.boltz_devices                    ? "--devices ${params.boltz_devices}"                                       : "",
            params.boltz_accelerator                ? "--accelerator ${params.boltz_accelerator}"                               : "",
            params.boltz_recycling_steps            ? "--recycling_steps ${params.boltz_recycling_steps}"                       : "",
            params.boltz_sampling_steps             ? "--sampling_steps ${params.boltz_sampling_steps}"                         : "",
            params.boltz_diffusion_samples          ? "--diffusion_samples ${params.boltz_diffusion_samples}"                   : "",
            params.boltz_max_parallel_samples       ? "--max_parallel_samples ${params.boltz_max_parallel_samples}"             : "",
            params.boltz_step_scale                 ? "--step_scale ${params.boltz_step_scale}"                                 : "",
            params.boltz_output_format              ? "--output_format ${params.boltz_output_format}"                           : "",
            params.boltz_num_workers                ? "--num_workers ${params.boltz_num_workers}"                               : "",
            params.boltz_method                     ? "--method ${params.boltz_method}"                                         : "",
            params.boltz_preprocessing_threads      ? "--preprocessing-threads ${params.boltz_preprocessing_threads}"           : "",
            params.boltz_affinity_mw_correction     ? "--affinity_mw_correction"                                                : "",
            params.boltz_sampling_steps_affinity    ? "--sampling_steps_affinity ${params.boltz_sampling_steps_affinity}"       : "",
            params.boltz_diffusion_samples_affinity ? "--diffusion_samples_affinity ${params.boltz_diffusion_samples_affinity}" : "",
            params.boltz_affinity_checkpoint        ? "--affinity_checkpoint ${params.boltz_affinity_checkpoint}"               : "",
            params.boltz_max_msa_seqs               ? "--max_msa_seqs ${params.boltz_max_msa_seqs}"                             : "",
            params.boltz_subsample_msa              ? "--subsample_msa"                                                         : "",
            params.boltz_num_subsampled_msa         ? "--num_subsampled_msa ${params.boltz_num_subsampled_msa}"                 : "",
            params.boltz_no_trifast                 ? "--no_trifast"                                                            : "",
            params.boltz_override                   ? "--override"                                                              : "",
            params.boltz_use_msa_server             ? "--use_msa_server"                                                        : "",
            params.boltz_msa_server_url             ? "--msa_server_url ${params.boltz_msa_server_url}"                         : "",
            params.boltz_msa_pairing_strategy       ? "--msa_pairing_strategy ${params.boltz_msa_pairing_strategy}"             : "",
            params.boltz_use_potentials             ? "--use_potentials"                                                        : "",
            params.boltz_write_full_pae             ? "--write_full_pae"                                                        : "",
            params.boltz_write_full_pde             ? "--write_full_pde"                                                        : ""
        ].findAll{ it }.join(' ').trim()

        publishDir = [
            [
                path: { "${params.outdir}/boltz" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: '*.*'
            ],
            [
                path: { "${params.outdir}/boltz/top_ranked_structures" },
                mode: 'copy',
                saveAs: { "${meta.id}.pdb" },
                pattern: '*.pdb'
            ]
        ]
    }

    withName: 'NFCORE_PROTEINFOLD:BOLTZ:MULTIQC' {
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : "boltz_$filename" }
        ]
    }

    withName: 'BOLTZ_FASTA|MULTIFASTA_TO_CSV|SPLIT_MSA' {
        cpus   = 1
        memory = 2.GB
        time   = 1.h
    }
}
